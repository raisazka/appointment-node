// Domain Auth

import { compare, encryptPassword, generateToken } from "../utils/auth/jwt.js"
import { loginSchema, registerSchema } from "../utils/validator/auth-validator.js"

// Then, it needs to be separated
class AuthService {
    constructor(repo) {
        this.repo = repo
    }

    login = async (loginReq) => {
        // validate request using joi
        const { error } = loginSchema.validate(loginReq, {
            abortEarly: true
        })
        if (error) throw new Error(error)

        // get user by email
        // validate if user exists / gak
        const user = await this.repo.getByEmail(loginReq.email)
        if (!user) throw new Error("User doesn't exists")

        // compare password 
        // apakah matched / gak
        const matched = compare(loginReq.password, user.password)
        if (!matched) throw new Error("Password doesn't matched")
        console.log("User ID",user._id);
        // send token -> generated by jwt
        return generateToken(user._id, user.email)
    }

    register = async (registerReq) => {
        // validate request using joi
        const { error } = registerSchema.validate(registerReq, {
            abortEarly: true
        })

        if (error) throw new Error(error) 

        // check if user udah exists / gak by email
        // kalo udah exists error karena gak mungkin ada 2 email yg sama
        const user = this.repo.getByEmail(registerReq.email)
        if (user.email) throw new Error("User already exists with the email")

        // encrypt password
        const hashed = encryptPassword(registerReq.password)
        registerReq.password = hashed
        // save user ke database
        const generatedUser = await this.repo.add(registerReq)

        return generateToken(generatedUser._id, registerReq.email)
    }
}

export default AuthService